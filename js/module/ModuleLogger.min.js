class GrayLogTransport{constructor(options){this.server=options.server||"127.0.0.1",this.port=options.port||12201,this.source=options.source||"plcDefault",this.facility=options.facility||"HorizonPLC",this.bufferSize=options.bufferSize||1350,this.socket=require("dgram").createSocket("udp4")}Log(_msg,level){let msg={version:"1.1",timestamp:(new Date).getTime()/1e3,host:this.source,facility:this.facility,level:level,message:_msg},toSend=JSON.stringify(msg);Process._Wifi.UDPHost(this.server,this.port),this.socket.send(toSend,0,toSend.length,this.port,this.server,(err,bytes)=>{(err||bytes>this.bufferSize)&&console.log("Cannot send UDP socket")})}}class ClassLogger{constructor(){this._Enabled=!0,this._Glog=new GrayLogTransport(Process._LogCreds)}set Enabled(flag){return"boolean"==typeof flag&&(this._Enabled=flag,!0)}get LogLevel(){return{INFO:"INFO",DEBUG:"DEBUG",ERROR:"ERROR",WARN:"WARN"}}Log(qlfier,msg){if(this._Enabled)return 1==Process._HaveWiFi&&this._Glog.Log(msg,6),!!this.LogLevel[qlfier]&&(console.log(`[${Process.GetSystemTime()}] ${qlfier}>> ${msg}`),!0)}}exports=ClassLogger;